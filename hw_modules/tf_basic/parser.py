import os, logging
import pickle, pandas,json
from pathlib import Path


def read_report(report, outfolder="./", out_file=None, format=None):
    """Reads file in a pandas dataframe and writes layer data into a pickle file

    Args:
        outfolder: folder where the pickled data will be stored
        report: filename of the report where the data will be extracted
        format: data format to save the data with - either pickle or json

    Returns: none
    """

    f = open(report)
    report = json.load(f)
    #print(report)

    result = []

    for e in report['traceEvents']:
        if 'args' in e.keys():
            if 'name' in e['args'].keys() and 'op' in e['args'].keys():
                if e['args']['op'] != 'Const' and not ':' in e['args']['name']:
                    #print(e['args']['name'], e['args']['op'], e['dur'])
                    result.append([e['args']['name'], e['args']['op'], e['dur']/1000])
    

    data = pandas.DataFrame(result, columns=['LayerName','Type','RunTime(ms)'])

    
    if format == "pickle":
        # open a new file and write extracted and modified data using pickle
        with open(os.path.join(outfolder, out_file + ".p"), "wb") as out_f:
            pickle.dump(data, out_f)
    elif format == "json":
        with open(os.path.join(outfolder, out_file + ".json"), "wb") as out_f:
            json.dump(data, out_f)
    else:
        logging.debug("Format:", format, " not implemented!")
    
    return data

def r2a(report):
    data = read_report(report)
    data['RunTime(ms)'] = data['RunTime(ms)'] 

    result = pandas.DataFrame(data[['LayerName','RunTime(ms)']].to_numpy(),columns=['name','time(ms)'])
    print(data)
    print(result)

    return result


def extract_data_from_folder(infold, outfold):
    """Extracts layer name and real time data from a folder of ncs2 reports

    Args:
        infold: folder containing the reports generated by benchmark_app.py
        outfold: folder where the extracted results will be saved

    Returns: none

    """

    # if the output data directory does not exist, create it
    #if not os.path.isdir(FLAGS.outfold):
        #os.mkdir(FLAGS.outfold)

    # avg_count holds the csv filenames of the benchmark_average_counters containing layer data
    avg_count = [f for f in os.listdir(infold) if "benchmark_average_counters_report" in f]

    #print("Parsing data from " + infold + ", following models found:")
    #[print(f.split("benchmark_average_counters_report_")[1].split("_sync.csv")[0]) for f in avg_count]

    # go over files and extract data
    for i, report in enumerate(avg_count):
        print(i + 1, ": parsing " + report)
        read_report(infold, outfold, report)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='NCS2 power benchmark')
    parser.add_argument("-if", '--infold', default='./report',
                        help='Folder containing reports', required=True)
    parser.add_argument("-of", '--outfold', default='report_sync_extracted',
                        help='folder which will contain the output pickle files', required=True)
    args = parser.parse_args()

    extract_data_from_folder(args.infold, args.outfold)
