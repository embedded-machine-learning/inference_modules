# report result parser

import os, logging
import json
import pandas as pd
from pathlib import Path

__author__ = "Matthias Wess"
__copyright__ = "Christian Doppler Laboratory for Embedded Machine Learning"
__license__ = "Apache 2.0"


def read_report(report="", outfolder="./tmp/"):
    """Reads file in a pandas dataframe and writes layer data into a json file

    Args:
        outfolder: folder where the json data will be stored
        report: filename of the report where the data will be extracted
        format: data format to save the data with - json

    Returns: False if File does not exist 
    """

    if not os.path.exists(Path(report)):
        return False
    # Open the text file and read its contents
    with open(report, 'r') as file:
        content = file.read()
    
    # split content into sections based on the headers
    sections = content.split('Operator-wise Profiling Info for Regular Benchmark Runs:')

    # take last section
    content = sections[-1]

    # Split the content into lines
    lines = content.split('\n')

    # Find the line number where the performance table starts
    start_line = lines.index('============================== Summary by node type ==============================')

    end_line = lines[start_line:].index('') +start_line

    # Extract the performance table into a list of lists
    table = [line.split() for line in lines[start_line+2:end_line]]

    cols = ["node type", "count", "avg_ms", "avg %", "cdf %", "mem KB", "times called"]
    # Create a pandas dataframe from the table
    data = pd.DataFrame(table[:], columns=cols)

    # remove , from numbers
    data = data.replace(',','', regex=True)

    # convert to float for possible columns
    for col in cols:
        if col in data.columns:
            try:
                data[col] = data[col].astype(float)
            except:
                pass
    

    # Print the dataframe
    print(data)
    return data

def r2a(report):
    data = read_report(report)

    if data is False:
        return False

    result = pd.DataFrame(data[['node type','avg_ms']].to_numpy(),columns=['name','time(ms)'])
    print(data)
    print(result)

    return result


def extract_data_from_folder(infold, outfold):
    """Extracts layer name and real time data from a folder of ncs2 reports

    Args:
        infold: folder containing the reports generated by benchmark_app.py
        outfold: folder where the extracted results will be saved

    Returns: none
    """

    # if the output data directory does not exist, create it
    os.makedirs(outfold, exist_ok=True)

    # avg_count holds the csv filenames of the benchmark_average_counters containing layer data
    avg_count = [f for f in os.listdir(infold) if "benchmark_average_counters_report" in f]

    # go over files and extract data
    for i, report in enumerate(avg_count):
        print(i + 1, ": parsing " + os.path.join(infold, report))
        read_report(report=os.path.join(infold, report), outfolder=outfold)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='Vela parser')
    parser.add_argument("-if", '--infold', default='./report',
                        help='Folder containing reports', required=True)
    parser.add_argument("-of", '--outfold', default='report_async_extracted',
                        help='folder which will contain the output json files', required=False)
    args = parser.parse_args()
    #read_report(args.infold, args.outfold)
    r2a(args.infold)

